/*
 *  Copyright (c) Facebook, Inc. and its affiliates.
 */

#include "h265_utils.h"

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "h265_bitstream_parser_state.h"
#include "h265_common.h"
#include "h265_pps_parser.h"
#include "h265_sps_parser.h"
#include "h265_vps_parser.h"
#include "rtc_base/arraysize.h"
#include "rtc_base/bit_buffer.h"

namespace h265nal {

class H265UtilsTest : public ::testing::Test {
 public:
  H265UtilsTest() {}
  ~H265UtilsTest() override {}
};

TEST_F(H265UtilsTest, TestGetSliceQpYIFrame) {
  // fuzzer::conv: data
  const uint8_t buffer[] = {
      // slice (I-frame)
      0x00, 0x00, 0x00, 0x01,
      0x26, 0x01, 0xaf, 0x09, 0x40, 0xfb, 0x27, 0x5b,
      0xfd, 0x5d, 0xc2, 0x4d, 0xe8, 0xb2, 0x0f, 0xcd,
      0x68, 0xdb, 0xc3, 0x41, 0x12, 0x2e, 0x13, 0x8d,
      0xdf, 0x66, 0xc9, 0x1f, 0xaa, 0xd4, 0x9b, 0x8d,
      0xdd, 0xe2, 0xa1, 0xda, 0x2e, 0xbd, 0x53, 0x74,
      0xd1, 0xbb, 0xde, 0x54, 0x8f, 0xa5, 0xe7, 0x2f,
      0xcc, 0xf7, 0x98, 0xd6, 0x33, 0xd5, 0x06, 0x01,
      0x52, 0x84, 0xbc, 0xa7, 0xe6, 0x02, 0x7f, 0xe9,
      0x50, 0x0a, 0x9a, 0x60, 0x89, 0xa0, 0xc0, 0xb4,
      0x6d, 0x60, 0x53, 0xe5, 0xdd, 0x93, 0xde, 0x03,
      0xff, 0xa8, 0xb0, 0x4d, 0x27, 0xa5, 0x82, 0xba,
      0xac, 0x63, 0x8b, 0x6f, 0x69, 0x7f, 0x93, 0xb2,
      0xe3, 0x0c, 0xfd, 0x29, 0x44, 0x42, 0xa7, 0x13,
      0xe9, 0xec, 0x37, 0xbb, 0x93, 0xe0, 0x62, 0xa9,
      0xa4, 0x44, 0x45, 0x59, 0x16, 0xf6, 0xb6, 0x5b,
      0x3a, 0xdb, 0xc3
  };

  // fuzzer::conv: begin

  // get some mock state
  H265BitstreamParserState bitstream_parser_state;
  auto vps = std::make_shared<H265VpsParser::VpsState>();
  bitstream_parser_state.vps[0] = vps;
  auto sps = std::make_shared<H265SpsParser::SpsState>();
  sps->sample_adaptive_offset_enabled_flag = 1;
  sps->chroma_format_idc = 1;
  bitstream_parser_state.sps[0] = sps;
  auto pps = std::make_shared<H265PpsParser::PpsState>();
  pps->init_qp_minus26 = 0;
  bitstream_parser_state.pps[0] = pps;

  // parse buffer
  std::vector<int32_t> slice_qp_y_vector;
  slice_qp_y_vector = H265Utils::GetSliceQpY(buffer, arraysize(buffer),
                                             &bitstream_parser_state);
  // fuzzer::conv: end

  // check there is 1 QP_Y value
  ASSERT_EQ(1, slice_qp_y_vector.size());
  // check the value is right
  EXPECT_EQ(35, slice_qp_y_vector[0]);
}

TEST_F(H265UtilsTest, TestGetSliceQpYIFrameBroken) {
  // fuzzer::conv: data
  const uint8_t buffer[] = {
      // slice (I-frame)
      0x00, 0x00, 0x00, 0x01,
      0x26, 0x01, 0xaf,
  };

  // get some mock state
  H265BitstreamParserState bitstream_parser_state;
  auto vps = std::make_shared<H265VpsParser::VpsState>();
  bitstream_parser_state.vps[0] = vps;
  auto sps = std::make_shared<H265SpsParser::SpsState>();
  sps->sample_adaptive_offset_enabled_flag = 1;
  sps->chroma_format_idc = 1;
  bitstream_parser_state.sps[0] = sps;
  auto pps = std::make_shared<H265PpsParser::PpsState>();
  pps->init_qp_minus26 = 0;
  bitstream_parser_state.pps[0] = pps;

  // parse buffer
  std::vector<int32_t> slice_qp_y_vector;
  slice_qp_y_vector = H265Utils::GetSliceQpY(buffer, arraysize(buffer),
                                             &bitstream_parser_state);

  // check there are no QP_Y values
  ASSERT_EQ(0, slice_qp_y_vector.size());
}

TEST_F(H265UtilsTest, TestGetSliceQpYPFrame) {
  // fuzzer::conv: data
  const uint8_t buffer[] = {
      // slice (P-frame)
      0x00, 0x00, 0x00, 0x01,
      0x02, 0x01, 0xd0, 0x0f, 0xe4, 0x16, 0x80, 0xf4,
      0x5a, 0xb4, 0x85, 0x6b, 0x17, 0xaa, 0xc1, 0x94,
      0xa8, 0x9f, 0x32, 0x11, 0xe4, 0x44, 0xa5, 0xfd,
      0xe7, 0x80, 0xda, 0xea, 0x21, 0x4c, 0x08, 0x23,
      0xea, 0x58, 0x15, 0xa3, 0x4c, 0x1a, 0xb3, 0x80,
      0x9b, 0x63, 0x50, 0x11, 0x75, 0x9a, 0xcc, 0x06,
      0x09, 0x69, 0x97, 0x75, 0xa0, 0x02, 0x24, 0x22,
      0x1c, 0x06, 0xa5, 0x69, 0x6e, 0xba, 0x9c, 0x79,
      0x58, 0x1e, 0x52, 0xa8, 0x26, 0xfe, 0x98, 0x6f,
      0x65, 0xee, 0x57, 0x10, 0x4f, 0x67, 0xe8, 0x43,
      0xde, 0x8e, 0xe6, 0x40, 0x28, 0x36, 0x45, 0x06,
      0x5e, 0xe8, 0x80, 0x34, 0xc0, 0x06, 0xf2, 0x16,
      0x4b, 0x78, 0x5f, 0x98, 0x56, 0xcc, 0xd9, 0x59,
      0x7a, 0xf3, 0x30, 0x5d, 0xa9, 0xc7, 0x84, 0x4a,
      0xe0, 0x16, 0xbf, 0x07, 0x24, 0x32, 0x65, 0xbd,
      0x39, 0xe2, 0x30, 0xbf, 0x27, 0xd3, 0x61, 0x25,
      0x02, 0xae, 0x5a, 0xa1, 0x08, 0x9b, 0x90, 0x14,
      0x2a, 0x09, 0xd1, 0x4a
  };

  // get some mock state
  H265BitstreamParserState bitstream_parser_state;
  auto vps = std::make_shared<H265VpsParser::VpsState>();
  bitstream_parser_state.vps[0] = vps;
  auto sps = std::make_shared<H265SpsParser::SpsState>();
  sps->sample_adaptive_offset_enabled_flag = 1;
  sps->chroma_format_idc = 1;
  sps->sps_max_dec_pic_buffering_minus1.push_back(6);
  bitstream_parser_state.sps[0] = sps;
  auto pps = std::make_shared<H265PpsParser::PpsState>();
  pps->init_qp_minus26 = 0;
  bitstream_parser_state.pps[0] = pps;

  // parse buffer
  std::vector<int32_t> slice_qp_y_vector;
  slice_qp_y_vector = H265Utils::GetSliceQpY(buffer, arraysize(buffer),
                                             &bitstream_parser_state);

  // check there is 1 QP_Y value
  ASSERT_EQ(1, slice_qp_y_vector.size());
  // check the value is right
  EXPECT_EQ(26, slice_qp_y_vector[0]);
}

}  // namespace h265nal
